24 Jan 2023 situation

Common:

Communication with Websockets is not directly request/response type.
Client might or might not get a response back. While "waiting response back" some other message might arrive to client.
Communication is more like message here and message there.
Sometimes server can send multiple messages back to a client. Modern browsers' developer tools has a section for WebSockets for viewing the messages.
If messages are plain text then they are readable fairly easy.


Blackjack system:

Communication is done using JSON format. Both UI and backend have a message handler: blackjackmessagehandler.ts and BlackjackEndpoint.java
Most messages from server to client contains table's latest state and a title/command which tells what has changed or what is expected from client.
Backend class Title.java contains possible titles and UI file sockethander.ts contains almost equivalent Command enum.
Sometimes additional player element is added alongside the table. 

Server does not limit the speed of the message sending. So the client can receive multiple messages/per second,
for example when players join the table. Table is initially opened as a watcher, taking a seat makes the watcher a player.


Basic communication flow related to blackjack game:

1. open localhost site
	http://localhost:8080/casino/

2. get tables
	http://localhost:8080/casino/blackjack/tables
	Sample response: 
	[
		{
			"thresholds": {
				"minimumBet": 10.0,
				"maximumBet": 100,
				"betPhaseTime": 15,
				"playerTime": 30,
				"phaseDelay": 14000,
				"minPlayers": 0,
				"maxPlayers": 1,
				"seatCount": 7,
				"allowedBetRoundSkips": 1
			},
			"id": "f7de1fc9-5d43-4573-8200-90c0ea4840af",
			"language": "ENGLISH",
			"game": "BLACKJACK",
			"type": "MULTIPLAYER",
			"availablePositions": [
				1,
				2,
				3,
				4,
				5,
				6,
				0
			]
		}
	]

3. open table
	ws://localhost:8080/casino/blackjack/{tableId}
	Upgrades connection to WebSocket
	Example
	ws://localhost:8080/casino/blackjack/f7de1fc9-5d43-4573-8200-90c0ea4840af
	Request payload:
	{"action":"OPEN_TABLE"}

	Sample response to OPEN_TABLE request (table is empty):

	{
	  "table" : {
		"type" : "MULTIPLAYER",
		"id" : "f7de1fc9-5d43-4573-8200-90c0ea4840af",
		"tableCard" : {
		  "thresholds" : {
			"minimumBet" : 5,
			"maximumBet" : 10,
			"betPhaseTime" : 15,
			"playerTime" : 30,
			"phaseDelay" : 14000,
			"minPlayers" : 0,
			"maxPlayers" : 7,
			"seatCount" : 7,
			"allowedBetRoundSkips" : 1
		  },
		  "id" : "f7de1fc9-5d43-4573-8200-90c0ea4840af",
		  "language" : "ENGLISH",
		  "game" : "BLACKJACK",
		  "type" : "MULTIPLAYER",
		  "availablePositions" : [ 1, 2, 3, 4, 5, 6, 0 ]
		},
		"playerInTurn" : null,
		"seats" : [ {
		  "number" : 1,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 2,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 3,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 4,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 5,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 6,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 0,
		  "player" : null,
		  "available" : true
		} ],
		"dealerHand" : {
		  "cards" : [ ],
		  "values" : [ 0 ],
		  "blackjack" : false
		},
		"players" : [ ],
		"gamePhase" : "BET",
		"counterTime" : 0,
		"watcherCount" : 1
	  },
	  "title" : "OPEN_TABLE",
	  "player" : null
	}
	

	title: OPEN_TABLE tells client to open a table using the information in JSON. Now the client is a watcher.
	
	
4. take seat / login

   Request payload:
   {"action":"JOIN","seat":"2"}
   
    Leaving the seatNumber as "" requests any free seat.
	
	Taking a seat makes a watcher the player. This means "logging in" as a new guest player.
	There is no database connected so only hard coded guest users are available. Guests receive 1000 playmoney as default. GuestNumber varies.
	
	Guest user details is now in the player data at the very end of the response.
	
	{
	  "table" : {
		"type" : "MULTIPLAYER",
		"id" : "f7de1fc9-5d43-4573-8200-90c0ea4840af",
		"tableCard" : {
		  "thresholds" : {
			"minimumBet" : 5,
			"maximumBet" : 10,
			"betPhaseTime" : 15,
			"playerTime" : 30,
			"phaseDelay" : 14000,
			"minPlayers" : 0,
			"maxPlayers" : 7,
			"seatCount" : 7,
			"allowedBetRoundSkips" : 1
		  },
		  "id" : "f7de1fc9-5d43-4573-8200-90c0ea4840af",
		  "language" : "ENGLISH",
		  "game" : "BLACKJACK",
		  "type" : "MULTIPLAYER",
		  "availablePositions" : [ 1, 3, 4, 5, 6, 0 ]
		},
		"playerInTurn" : null,
		"seats" : [ {
		  "number" : 1,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 2,
		  "player" : {
			"balance" : 1000.00,
			"totalBet" : null,
			"hands" : [ {
			  "cards" : [ ],
			  "active" : true,
			  "doubled" : false,
			  "bet" : null,
			  "insured" : false,
			  "values" : [ 0 ],
			  "blackjack" : false
			} ],
			"actions" : [ ],
			"seatNumber" : 2,
			"userName" : "guest4"
		  },
		  "available" : false
		}, {
		  "number" : 3,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 4,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 5,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 6,
		  "player" : null,
		  "available" : true
		}, {
		  "number" : 0,
		  "player" : null,
		  "available" : true
		} ],
		"dealerHand" : {
		  "cards" : [ ],
		  "values" : [ 0 ],
		  "blackjack" : false
		},
		"players" : [ {
		  "balance" : 1000.00,
		  "totalBet" : null,
		  "hands" : [ {
			"cards" : [ ],
			"active" : true,
			"doubled" : false,
			"bet" : null,
			"insured" : false,
			"values" : [ 0 ],
			"blackjack" : false
		  } ],
		  "actions" : [ ],
		  "seatNumber" : 2,
		  "userName" : "guest4"
		} ],
		"gamePhase" : "BET",
		"counterTime" : 0,
		"watcherCount" : 0
	  },
	  "title" : "LOGIN",
	  "player" : {
		"balance" : 1000.00,
		"totalBet" : null,
		"hands" : [ {
		  "cards" : [ ],
		  "active" : true,
		  "doubled" : false,
		  "bet" : null,
		  "insured" : false,
		  "values" : [ 0 ],
		  "blackjack" : false
		} ],
		"actions" : [ ],
		"seatNumber" : 2,
		"userName" : "guest4"
	  }
	
	
5. Game starts

 The game starts immediately after first player joins the table.
 Server informs this with a message
  "title" : "BET_TIME_START" which is the value to check
  ...
  "gamePhase" : "BET",
    "counterTime" : 14,
    "watcherCount" : 0
  },
 
  ..
 counterTime in seconds tells how much time BET_PHASE still has
  
 
6. BET
	Sample request
	{"action":"BET","amount":5}
	Bet must be within table limits and user balance. Bet can be changed as many times as timer is running.
	Removing a bet 
	{"action":"BET","amount":0}
	Only the last received and accepted bet is what counts.
	
7. Show initial deal's cards and available actions

 "title" : "INITIAL_DEAL_DONE" tells that all players and dealer have been dealt cards
 
 "playerInTurn" tells who of the players is in turn. PlayerInTurn has userName which can be compared to the userName given in the login/join response.
 If playerInTurn's userName matches with the userName given in login response then it is current browsers turn.
 
    "playerInTurn" : {
      "balance" : 995.00,
      "totalBet" : 5.00,
      "hands" : [ {
        "cards" : [ {
          "rank" : 11,
          "suit" : "HEART",
          "ace" : false,
          "pictureCard" : true
        }, {
          "rank" : 4,
          "suit" : "CLUB",
          "ace" : false,
          "pictureCard" : false
        } ],
        "active" : true,
        "doubled" : false,
        "bet" : 5.00,
        "insured" : false,
        "values" : [ 14 ],
        "blackjack" : false
      } ],
      "actions" : [ "TAKE", "STAND" ],
      "seatNumber" : 2,
      "userName" : "guest6"
    },
	
	Players can have 1-2 hands depending on if the first hand is split. Active value tells that actions are targeted to this hand.
	If ace is one of the cards then hand can have two values as ace can be 1 or 11.
	
    Dealer hand is separated:
	
    "dealerHand" : {
      "cards" : [ {
        "rank" : 12,
        "suit" : "DIAMOND",
        "ace" : false,
        "pictureCard" : true
      } ],
      "values" : [ 10 ],
      "blackjack" : false
    },
  
  PlayerInTurn is now duplicated in the "player" part.
  
  "player" : {
    "balance" : 995.00,
    "totalBet" : 5.00,
    "hands" : [ {
      "cards" : [ {
        "rank" : 11,
        "suit" : "HEART",
        "ace" : false,
        "pictureCard" : true
      }, {
        "rank" : 4,
        "suit" : "CLUB",
        "ace" : false,
        "pictureCard" : false
      } ],
      "active" : true,
      "doubled" : false,
      "bet" : 5.00,
      "insured" : false,
      "values" : [ 14 ],
      "blackjack" : false
    } ],
    "actions" : [ "TAKE", "STAND" ],
    "seatNumber" : 2,
    "userName" : "guest6"
  }
}

8. Taking action

	In the previous section server has calculated available actions.
	Possible server returned values are TAKE,STAND,DOUBLE_DOWN, SPLIT . Insurance is separate phase and UI needs to calculate it separately.
	Player has certain time to make decision. Time (seconds) can be read from TableCard.
	
	STAND:
	{"action":"STAND"}

9. Timing out, no action taken on time
	"title":"TIMED_OUT"
	Player section contains timed out player.
	If no action is taken on time, the turn is changed to next player/dealer. In case of split where hand has one card and player does not
	act on time or in case of disconnection, the server autoplays all hands to contain 2 cards (auth player can still win).
	Timed out player will be removed from table when skip bet phase count is over maximum.

10. Insurance
	When dealer has starting ace the insurance phase starts, server sends to clients
	"title":"INSURANCE_TIME_START"
	Client needs to calculate if user has still balance left half of the original bet. If has then insuring is allowed.
	Insured hand cannot be split later on.

11. Completing the round

 After all players have been played their turn. Dealer takes/shows the cards it gets.
	Server sends
	"title" : "ROUND_COMPLETED",
	
   Based on returned JSON can be determined did the player win or not. For example from balance and cardValues. Also dealers cards are shown
   
   
12. Next round starts
   
   After phaseDelay (in millis)from TableCard server sends 
     "title" : "BET_TIME_START"
	with a counter value how much bet time left.
	The phaseDelay is for players to check their and dealer cards and who won before the new round starts.
	
	
13. Nobody bets on bet round
	Server removes players and sets them as watchers with
	"title":"NO_BETS_NO_DEAL"

14. Skipping bets when multiple players playing
	TableCard shows how many times is allowed to skip the betround. Server removes the player and sets as watcher if going over the limit
	

15. New Player joins


  "title" : "NEW_PLAYER",
  "player" : {
    "balance" : 1000.00,
    "totalBet" : null,
    "hands" : [ {
      "cards" : [ ],
      "active" : true,
      "doubled" : false,
      "bet" : null,
      "insured" : false,
      "values" : [ 0 ],
      "blackjack" : false
    } ],
    "actions" : [ ],
    "seatNumber" : 1,
    "userName" : "guest18"
  }
  
  Player info also in seats list.
}
 